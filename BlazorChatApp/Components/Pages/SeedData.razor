@page "/admin/seed-data"
@rendermode InteractiveServer
@inject Microsoft.Extensions.Configuration.IConfiguration _config

<PageTitle>Data Seeding</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header">
                    <h3>Cosmos DB Data Seeding</h3>
                </div>
                <div class="card-body">
                    <p class="card-text">
                        This tool will load sample vector data from the local seed-data.json file and seed it into your Cosmos DB container.
                        The sample data includes technology-related articles about Azure services that will provide a rich dataset for testing the RAG functionality.
                    </p>
                    
                    @if (isSeeding)
                    {
                        <div class="mb-4">
                            <div class="d-flex align-items-center mb-3">
                                <div class="spinner-border text-primary me-3" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <span><strong>Seeding data in progress...</strong></span>
                            </div>
                            
                            @if (progressPercentage > 0)
                            {
                                <div class="progress mb-3" style="height: 20px;">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                         role="progressbar" 
                                         style="width: @(progressPercentage)%"
                                         aria-valuenow="@progressPercentage" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @progressPercentage%
                                    </div>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(currentStatus))
                            {
                                <div class="alert alert-info">
                                    <div style="font-family: monospace; white-space: pre-line;">@currentStatus</div>
                                </div>
                            }
                            
                            @if (progressMessages.Any())
                            {
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">
                                            <button class="btn btn-link p-0" type="button" data-bs-toggle="collapse" 
                                                    data-bs-target="#progressCollapse" aria-expanded="false">
                                                üìã Progress Log (@progressMessages.Count messages)
                                            </button>
                                        </h6>
                                    </div>
                                    <div class="collapse" id="progressCollapse">
                                        <div class="card-body" style="max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 0.9em;">
                                            @foreach (var message in progressMessages.AsEnumerable().Reverse().Take(20))
                                            {
                                                <div class="mb-1">
                                                    <small class="text-muted">[@message.Timestamp.ToString("HH:mm:ss")]</small>
                                                    <span>@message.Message</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else if (seedingComplete)
                    {
                        <div class="alert alert-success">
                            <h5 class="alert-heading">üéâ Data seeding completed successfully!</h5>
                            <p><strong>Summary:</strong></p>
                            <ul>
                                <li>‚úÖ Sample vector data has been loaded into your Cosmos DB container</li>
                                <li>üìä Progress: @progressPercentage% complete</li>
                                <li>‚è±Ô∏è Total time: @(progressMessages.Count > 0 ? $"{(DateTime.Now - progressMessages.First().Timestamp).TotalSeconds:F1} seconds" : "N/A")</li>
                                <li>üìù Total messages processed: @progressMessages.Count</li>
                            </ul>
                            <p><strong>What's next?</strong></p>
                            <ul>
                                <li>Go to the <a href="/chat" class="alert-link">Chat page</a> to test the RAG functionality</li>
                                <li>Try asking questions like:</li>
                                <ul>
                                    <li>"What is Azure Functions?"</li>
                                    <li>"Tell me about Azure Cosmos DB"</li>
                                    <li>"How does Azure Storage work?"</li>
                                    <li>"Explain machine learning in Azure"</li>
                                </ul>
                            </ul>
                        </div>
                    }
                    else if (hasError)
                    {
                        <div class="alert alert-danger">
                            <h5 class="alert-heading">‚ùå Error occurred during seeding</h5>
                            <p>@errorMessage</p>
                            <p>Please check:</p>
                            <ul>
                                <li>Cosmos DB connection is configured correctly</li>
                                <li>Container app has the required permissions</li>
                                <li>Database "vectordb" and container "Container3" exist</li>
                            </ul>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <h5 class="alert-heading">‚ö†Ô∏è Before you start</h5>
                            <p>Make sure:</p>
                            <ul>
                                <li>Your Cosmos DB is properly configured with vector search enabled</li>
                                <li>The database "vectordb" and container "Container3" exist</li>
                                <li>The container app has proper permissions to write to Cosmos DB</li>
                            </ul>
                        </div>
                    }
                </div>
                <div class="card-footer">
                    @if (!isSeeding && !seedingComplete)
                    {
                        <button class="btn btn-primary btn-lg" @onclick="StartSeeding" disabled="@isSeeding">
                            <i class="fas fa-database"></i> Start Data Seeding
                        </button>
                        <div class="mt-2">
                            <small class="text-muted">
                                <i class="fas fa-info-circle"></i> 
                                This will load ~108 technology articles with vector embeddings into Cosmos DB
                            </small>
                        </div>
                    }
                    
                    @if (isSeeding)
                    {
                        <button class="btn btn-secondary" disabled>
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            Seeding in progress...
                        </button>
                        <div class="mt-2">
                            <small class="text-muted">
                                <i class="fas fa-clock"></i> 
                                Please wait while we upload the sample data. This typically takes 1-2 minutes.
                            </small>
                        </div>
                    }
                    
                    @if (seedingComplete)
                    {
                        <a href="/chat" class="btn btn-success btn-lg">
                            <i class="fas fa-comments"></i> Try the Chat Now
                        </a>
                        <button class="btn btn-outline-secondary ms-2" @onclick="ResetPage">
                            <i class="fas fa-redo"></i> Seed Again
                        </button>
                        <div class="mt-2">
                            <small class="text-success">
                                <i class="fas fa-check-circle"></i> 
                                Ready to test! Your Cosmos DB now contains vector data for the RAG chat.
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isSeeding = false;
    private bool seedingComplete = false;
    private bool hasError = false;
    private string errorMessage = string.Empty;
    private string currentStatus = string.Empty;
    private int progressPercentage = 0;
    private List<ProgressMessage> progressMessages = new();
    
    private class ProgressMessage
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
    }

    private async Task StartSeeding()
    {
        try
        {
            // Reset state
            isSeeding = true;
            seedingComplete = false;
            hasError = false;
            errorMessage = string.Empty;
            currentStatus = string.Empty;
            progressPercentage = 0;
            progressMessages.Clear();
            
            StateHasChanged();

            var seeder = new DataSeeder(_config);
            
            // Progress callback to update UI in real-time
            void UpdateProgress(string message)
            {
                InvokeAsync(() =>
                {
                    currentStatus = message;
                    progressMessages.Add(new ProgressMessage 
                    { 
                        Timestamp = DateTime.Now, 
                        Message = message 
                    });
                    
                    // Parse progress percentage from progress messages
                    if (message.Contains("Progress:") && message.Contains("%"))
                    {
                        var match = System.Text.RegularExpressions.Regex.Match(message, @"\((\d+)%\)");
                        if (match.Success && int.TryParse(match.Groups[1].Value, out int percentage))
                        {
                            progressPercentage = percentage;
                        }
                    }
                    
                    StateHasChanged();
                });
            }
            
            // Start seeding with progress callback
            await seeder.SeedSampleDataAsync(UpdateProgress);

            seedingComplete = true;
            progressPercentage = 100;
            currentStatus = "üéâ Data seeding completed successfully!";
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = ex.Message;
            currentStatus = $"‚ùå Error: {ex.Message}";
            progressMessages.Add(new ProgressMessage 
            { 
                Timestamp = DateTime.Now, 
                Message = $"‚ùå Fatal error: {ex.Message}" 
            });
            Console.WriteLine($"Seeding error: {ex}");
        }
        finally
        {
            isSeeding = false;
            StateHasChanged();
        }
    }

    private void ResetPage()
    {
        isSeeding = false;
        seedingComplete = false;
        hasError = false;
        errorMessage = string.Empty;
        currentStatus = string.Empty;
        progressPercentage = 0;
        progressMessages.Clear();
        StateHasChanged();
    }
}
